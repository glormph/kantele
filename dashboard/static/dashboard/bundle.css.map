{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../../frontend/dashboard/src/App.svelte"
  ],
  "sourcesContent": [
    "<script>\nimport { onMount } from 'svelte';\nimport { schemeSet1 } from 'd3-scale-chromatic';\n\nimport Instrument from './Instrument.svelte'\nimport StackedPlot from './StackedPlot.svelte';\nimport GroupedBarPlot from './GroupedBarPlot.svelte'\nimport DateSlider from './DateSlider.svelte';\n\n\nlet prodplot;\nlet cfprodplot;\nlet projdistplot;\nlet instrumenttabs = {};\n\nlet firstday = 0;\nlet maxdays = 30;\nlet tabshow = 'prod';\n\nlet qcdata = Object.fromEntries(instruments.map(x => [x[1], {loaded: false}]));\n['ident', 'psms', 'precursorarea', 'prec_error', 'rt', 'msgfscore', 'fwhm', 'ionmob'].forEach(x => {\n  instruments.forEach(inst => {\n    qcdata[inst[1]][x] = {data: [], series: [], xkey: false};\n  })\n});\nlet proddata = {\n  fileproduction: {},\n  projecttypeproduction: {},\n  projectdistribution: {},\n};\n\nasync function showInst(iid) {\n  if (!qcdata[iid].loaded) {\n    await getInstrumentQC(iid, 0, 30);\n    instrumenttabs[iid].parseData();\n  }\n  tabshow = `instr_${iid}`;\n}\n\nasync function getInstrumentQC(instrument_id, daysago, maxdays) {\n  const response = await fetch(`/dash/longqc/${instrument_id}/${daysago}/${maxdays}`);\n  const result = await response.json();\n  qcdata[instrument_id] = {};\n  for (let key in result) {\n    qcdata[instrument_id][key] = result[key];\n  }\n  qcdata[instrument_id].loaded = true;\n}\n\nfunction showProd() {\n  tabshow = 'prod';\n}\n\nasync function reloadInstrument(e) {\n  qcdata[e.detail.instrument_id].loaded = false;\n  await getInstrumentQC(e.detail.instrument_id, e.detail.firstday, e.detail.showdays);\n  instrumenttabs[e.detail.instrument_id].parseData();\n}\n\nasync function fetchProductionData(maxdays, firstday) {\n  const resp = await fetch(`/dash/proddata/${firstday}/${maxdays}`);\n  proddata = await resp.json();\n  // setTimeout since after fetching, the plot components havent updated its props\n  proddata.fileproduction.data.map(d => Object.assign(d, d.day = new Date(d.day)));\n  proddata.fileproduction.instruments = new Set(proddata.fileproduction.data.map(d => Object.keys(d)).flat());\n  proddata.projecttypeproduction.data.map(d => Object.assign(d, d.day = new Date(d.day)));\n  proddata.projecttypeproduction.projtypes= new Set(proddata.projecttypeproduction.data.map(d => Object.keys(d)).flat());\n  proddata.projectdistribution.ptypes = new Set(proddata.projectdistribution.data.map(d => Object.keys(d)).flat());\n  setTimeout(() => {\n    prodplot.plot();\n    cfprodplot.plot();\n    projdistplot.plot();\n  }, 0);\n}\n\nonMount(async() => {\n  fetchProductionData(maxdays, firstday);\n})\n</script>\n\n<style>\n.instrplot.inactive {\n  display: none;\n}\n</style>\n\n<div class=\"tabs is-toggle is-centered is-small\">\n\t<ul>\n    <li class={tabshow === `prod` ? 'is-active' : ''}>\n      <a on:click={showProd}><span>Production</span></a>\n    </li>\n    {#each instruments as instr}\n    <li class={tabshow === `instr_${instr[1]}` ? 'is-active' : '' }>\n      <a on:click={e => showInst(instr[1])}><span>{instr[0]}</span></a>\n    </li>\n    {/each}\n\t</ul>\n</div>\n<div class=\"container\">\n  <section>\n    {#each instruments as instr}\n    <div class={`instrplot ${tabshow === `instr_${instr[1]}` ? 'active' : 'inactive'}`} >\n      <Instrument on:reloaddata={e => reloadInstrument(e)} bind:this={instrumenttabs[instr[1]]} bind:instrument_id={instr[1]} bind:qcdata={qcdata[instr[1]]} />\n    </div>\n    {/each}\n    <div class={`instrplot ${tabshow === `prod` ? 'active' : 'inactive'}`} >\n      <DateSlider on:updatedates={e => fetchProductionData(e.detail.showdays, e.detail.firstday)} />\n      <hr>\n      <div class=\"tile is-ancestor\">\n        <div class=\"tile\">\n          <div class=\"content\">\n<h5 class=\"title is-5\">Raw file production per instrument</h5>\n            <StackedPlot bind:this={prodplot} colorscheme={schemeSet1} data={proddata.fileproduction.data} stackgroups={proddata.fileproduction.instruments} xkey={proddata.fileproduction.xkey} xlab=\"Date\" ylab=\"Raw files (GB)\" />\n          </div>\n        </div>\n        <div class=\"tile\">\n          <div class=\"content\">\n<h5 class=\"title is-5\">Raw file production per project type</h5>\n            <StackedPlot bind:this={cfprodplot} colorscheme={schemeSet1} data={proddata.projecttypeproduction.data} stackgroups={proddata.projecttypeproduction.projtypes} xkey={proddata.projecttypeproduction.xkey} xlab=\"Date\" ylab=\"Raw files (GB)\" />\n          </div>\n        </div>\n      </div>\n      <div class=\"tile is-ancestor\">\n        <div class=\"tile\">\n          <div class=\"content\">\n            <h5 class=\"title is-5\">Active project size distribution</h5>\n            <GroupedBarPlot bind:this={projdistplot} colorscheme={schemeSet1} data={proddata.projectdistribution.data} groups={proddata.projectdistribution.ptypes} xkey={proddata.projectdistribution.xkey} ylab=\"# Projects\" xlab=\"Raw files (GB)\" />\n          </div>\n        </div>\n        <div class=\"tile\">\n          <div class=\"content\">\n\n          </div>\n        </div>\n      </div>\n      \n    </div>\n\t</section>\n</div>\n"
  ],
  "names": [],
  "mappings": "AAiFA,UAAU,SAAS,cAAC,CAAC,AACnB,OAAO,CAAE,IAAI,AACf,CAAC"
}
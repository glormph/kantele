# Generated by Django 3.2.13 on 2023-12-12 10:40

from django.db import migrations, models
import django.db.models.deletion


def add_dset_samples(apps, s):
    DS = apps.get_model('datasets', 'DatasetSample')
    QCS = apps.get_model('datasets', 'QuantChannelSample')
    DS.objects.bulk_create([DS(dataset=x.dataset, projsample=x.projsample) for x in QCS.objects.distinct('dataset', 'projsample')])
    QSF = apps.get_model('datasets', 'QuantSampleFile')
    DS.objects.bulk_create([DS(dataset=x.rawfile.dataset, projsample=x.projsample) for x in QSF.objects.distinct('rawfile__dataset', 'projsample')])
    QFCS = apps.get_model('datasets', 'QuantFileChannel')
    DS.objects.bulk_create([DS(dataset=x.dsrawfile.dataset, projsample=x.projsample) for x in QFCS.objects.distinct('dsrawfile__dataset', 'projsample')])


def checkbox_to_dedicated_sampletype(apps, s):
    CBO = apps.get_model('datasets', 'CheckboxParameterOption')
    SMT = apps.get_model('datasets', 'SampleMaterialType')
    
    QCS = apps.get_model('datasets', 'QuantChannelSample')
    QSF = apps.get_model('datasets', 'QuantSampleFile')
    SM = apps.get_model('datasets', 'SampleMaterial')
    for x in CBO.objects.filter(param__title='Sample type'):
        # Keep pk same to easily transfer dataset thing as well
        SMT.objects.create(name=x.value, pk=x.pk)
    # For all datasets:
    # Projsamples -> from QuantChannelSample
    projsams = set()
    for qcs in QCS.objects.filter(dataset__checkboxparametervalue__isnull=False).distinct(
            'projsample'):
        projsams.add(qcs.projsample)
        SM.objects.bulk_create([SM(sample=qcs.projsample, sampletype_id=cbv.value.pk)
            for cbv in qcs.dataset.checkboxparametervalue_set.all()])
    # Projsamples -> from QuantSampleFile
    for qsf in QSF.objects.filter(rawfile__dataset__checkboxparametervalue__isnull=False).distinct(
            'projsample').exclude(projsample__in=projsams):
        SM.objects.bulk_create([SM(sample=qsf.projsample, sampletype_id=cbv.value.pk)
            for cbv in qsf.rawfile.dataset.checkboxparametervalue_set.distinct('value')])


def datasetspecies_to_samplespecies(apps, s):
    QCS = apps.get_model('datasets', 'QuantChannelSample')
    QSF = apps.get_model('datasets', 'QuantSampleFile')
    SSp = apps.get_model('datasets', 'SampleSpecies')
    # Projsamples -> from QuantChannelSample
    projsams = set()
    for qcs in QCS.objects.filter(dataset__datasetspecies__isnull=False).distinct('projsample'):
        projsams.add(qcs.projsample)
        SSp.objects.bulk_create([SSp(sample=qcs.projsample, species=dsp.species)
            for dsp in qcs.dataset.datasetspecies_set.distinct('species')])
    # Projsamples -> from QuantSampleFile
    for qsf in QSF.objects.filter(rawfile__dataset__datasetspecies__isnull=False).distinct(
            'projsample').exclude(projsample__in=projsams):
        SSp.objects.bulk_create([SSp(sample=qsf.projsample, species=dsp.species)
            for dsp in qsf.rawfile.dataset.datasetspecies_set.distinct('species')])
        

def dcstates_str_to_int(apps, s):
    DCS = apps.get_model('datasets', 'DatasetComponentState')
    DCS.objects.filter(state='ok').update(state=1)
    DCS.objects.filter(state='new').update(state=2)
    DCS.objects.filter(state='incomplete').update(state=3)
    DCS.objects.filter(state='error').update(state=4)


def datasetcomponent_sampleprep_to_sample(apps, s):
    SP = apps.get_model('datasets', 'SelectParameter')
    SP.objects.update(category=1)
    CBP = apps.get_model('datasets', 'CheckboxParameter')
    CBP.objects.all().delete()


def fake_stub(apps, s):
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('datasets', '0017_seqsamplefile'),
    ]

    operations = [
        migrations.AlterField(
            model_name='datatypecomponent',
            name='component',
            field=models.IntegerField(choices=[(1, 'Files'), (2, 'Samples'), (3, 'MS Acquisition'), (4, 'Definition'), (6, 'LC samples'), (7, 'Pooled LC samples')]),
        ),

        migrations.RenameModel(
            old_name='QuantFileChannelSample',
            new_name='QuantFileChannel',
        ),

        migrations.CreateModel(
            name='DatasetSample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='datasets.dataset')),
                ('projsample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='datasets.projectsample')),
            ],
        ),
        migrations.CreateModel(
            name='SampleMaterialType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='SampleMaterial',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='datasets.projectsample')),
                ('sampletype', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='datasets.samplematerialtype')),
            ],
        ),
        migrations.CreateModel(
            name='SampleSpecies',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='datasets.projectsample')),
                ('species', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='datasets.species')),
            ],
        ),
        migrations.AlterUniqueTogether(
            # Remove unique_together
            name='projectsample',
            unique_together=set(),
        ),
        migrations.AddConstraint(
            model_name='projectsample',
            constraint=models.UniqueConstraint(fields=('sample', 'project'), name='uni_sampleproj'),
        ),
        migrations.DeleteModel(
            name='SeqSampleFile',
        ),
        migrations.AddConstraint(
            model_name='samplespecies',
            constraint=models.UniqueConstraint(fields=('sample', 'species'), name='uni_samplespecies'),
        ),
        migrations.AddConstraint(
            model_name='samplematerial',
            constraint=models.UniqueConstraint(fields=('sample', 'sampletype'), name='uni_sampletype'),
        ),
        migrations.AddConstraint(
            model_name='datasetsample',
            constraint=models.UniqueConstraint(fields=('projsample', 'dataset'), name='uni_samds'),
        ),

        migrations.RunPython(add_dset_samples, fake_stub),
        migrations.RunPython(datasetspecies_to_samplespecies, fake_stub),
        migrations.RunPython(checkbox_to_dedicated_sampletype, fake_stub),

        migrations.RunPython(dcstates_str_to_int, fake_stub),
        migrations.AlterField(
            model_name='datasetcomponentstate',
            name='state',
            field=models.IntegerField(choices=[(1, 'OK'), (2, 'New'), (3, 'Incomplete'), (4, 'Error')]),
        ),
        migrations.AddConstraint(
            model_name='datasetcomponentstate',
            constraint=models.UniqueConstraint(fields=('dataset', 'dtcomp'), name='uni_dscomp'),
        ),

        migrations.AlterField(
            model_name='checkboxparameter',
            name='category',
            field=models.IntegerField(choices=[(1, 'MS Samples')]),
        ),
        migrations.AlterField(
            model_name='fieldparameter',
            name='category',
            field=models.IntegerField(choices=[(1, 'MS Samples')]),
        ),
        migrations.AlterField(
            model_name='selectparameter',
            name='category',
            field=models.IntegerField(choices=[(1, 'MS Samples')]),
        ),

        migrations.AlterField(
            model_name='quanttype',
            name='name',
            field=models.TextField(unique=True),
        ),
        migrations.RemoveField(
            model_name='quantfilechannel',
            name='projsample',
        ),

    ]

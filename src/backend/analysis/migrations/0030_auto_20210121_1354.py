# Generated by Django 3.1.2 on 2021-01-21 13:54

from django.db import migrations, models


def multiple_values_to_single_list(apps, sc_ed):
    AnaP = apps.get_model('analysis', 'AnalysisParam')
    Analysis = apps.get_model('analysis', 'Analysis')
    new_vals = {}
    for ap in AnaP.objects.filter(param__ptype='multi'):
        try:
            new_vals[ap.analysis_id][ap.param_id].append(ap.value)
        except KeyError:
            new_vals[ap.analysis_id] = {ap.param_id: [ap.value]}
    for ana in Analysis.objects.all():
        if ana.id not in new_vals:
            continue
        else:
            paramvals = new_vals[ana.id]
        new_ap_ids = []
        aps = ana.analysisparam_set.filter(param__ptype='multi')
        for p_id, new_multival in paramvals.items():
            ap = aps.filter(param_id=p_id).first()
            ap.value = new_multival
            ap.save()
            new_ap_ids.append(ap.pk)
        aps.exclude(pk__in=new_ap_ids).delete()


def new_list_to_old_values(apps, sc_ed):
    AnaP = apps.get_model('analysis', 'AnalysisParam')
    for ap in AnaP.objects.filter(param__ptype='multi'):
        vals = ap.value[:]
        ap.value = vals[0]
        ap.save()
        if len(vals) == 1:
            continue
        for oldval in vals[1:]:
            AnaP.objects.create(param=ap.param, analysis=ap.analysis, value=oldval)


class Migration(migrations.Migration):

    dependencies = [
        ('analysis', '0029_oldjobdata_to_models'),
    ]

    operations = [
        migrations.RunPython(multiple_values_to_single_list, new_list_to_old_values),

        migrations.AddConstraint(
            model_name='analysisparam',
            constraint=models.UniqueConstraint(fields=('analysis', 'param'), name='uni_anaparam'),
        ),
    ]

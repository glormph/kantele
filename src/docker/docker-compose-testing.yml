
services:
    web:
        depends_on:
            - db
            - mq
            - storage_mvfiles
            - storage_downloads
        extends:
            file: ./docker-compose-base.yml
            service: web
        env_file:
            - ./testing.env
        volumes:
          - ../backend:/kantele
          - ../../data/test:/fixtures
        environment:
            SECRET_KEY: test_secret
            HOST_DOMAIN: 'web'
            TESTING: 1
            PROTOCOL: http
            DB_HOST: db
            RABBITHOST: mq
            STORAGESHARENAMES: "oldstorage,newstorage"
            TMPSHARE: /fixtures/tmp
            STORAGESHARES: '/fixtures/oldstorage,/fixtures/newstorage'
    
    db: 
        image: postgres:14.3
        user: "${DBUID:-0}:${DBGID:-0}"
        environment:
            POSTGRES_PASSWORD: "${PG_SUPERUSER_PASSWORD}"
            KANTELE_PASSWORD: "${PG_KANTELE_PASSWORD}"
            KANTELE_DB: "${KANTELE_DB_NAME}"
            KANTELE_ROLE: "${PG_KANTELE_USER}"
        volumes:
            - "../docker/create_kantele_db.sh:/docker-entrypoint-initdb.d/create_kantele_db.sh"

    mq:
        extends:
            file: ../docker/docker-compose-base.yml
            service: mq

    storage_mvfiles:
        extends:
            file: ../docker/docker-compose-dev.yml
            service: storage
        env_file:
            - ../docker/testing.env
        command: celery worker -A kantele -Q mv_md5_storage -n storage_mv.%h --concurrency=1
        volumes:
            - ../../data/test:/storage
        environment:
            KANTELEHOST: web
            TMPSHARE: '/storage/tmp'
            WEBSHARE: '/storage/web'
            ANALYSISSHARE: '/storage/analysis'
            STORAGESHARENAMES: "oldstorage,newstorage"
            STORAGESHARES: '/storage/oldstorage,/storage/newstorage'

    storage_downloads:
        extends:
            file: ../docker/docker-compose-dev.yml
            service: storage
        env_file:
            - ../docker/testing.env
        command: celery worker -A kantele -Q file_download -n storage_downloads.%h --concurrency=1
        volumes:
            - ../../data/test:/storage
        environment:
            KANTELEHOST: web
            TMPSHARE: '/storage/tmp'
            WEBSHARE: '/storage/web'
            ANALYSISSHARE: '/storage/analysis'
            STORAGESHARENAMES: "oldstorage,newstorage"
            STORAGESHARES: '/storage/oldstorage,/storage/newstorage'


            #    nginx:
            #        image: kantele_nginx_stage
            #        restart: on-failure
            #        build:
            #            context: ../
            #            dockerfile: ./docker/Dockerfile
            #            target: nginx_stage
            #            args:
            #                USER_ID: "${USER_ID:-You must run export USER_ID}"
            #                GROUP_ID: "${GROUP_ID:-You must run export GROUP_ID}"
            #        volumes:
            #            - ../docker/uwsgi_params:/etc/nginx/uwsgi_params
            #            - ../docker/nginx_stage.conf:/etc/nginx/nginx.conf
            #              #- "${HOST_UPLOADPATH}:${CONTAINER_UPLOADPATH}"
            #              #- "${HOST_ANALYSISFILES}:${CONTAINER_ANALYSISPATH}"

        #    upload_bay_rsync:
        #        image: rsync_stor
        #        build:
        #            context: ../
        #            dockerfile: ./docker/Dockerfile
        #            target: rsync_storage
        #            args:
        #                USER_ID: "${USER_ID:-You must run export USER_ID}"
        #                GROUP_ID: "${GROUP_ID:-You must run export GROUP_ID}"
        #        ports:
        #            - "${RSYNC_SSHPORT}:22"
        #        volumes:
        #            - ../docker/test_rsync_sshkey.pub:/home/kantele/.ssh/authorized_keys
        #            - "${HOST_UPLOADPATH}:${CONTAINER_UPLOADPATH}"
        #
            #    nginx:
            #        image: kantele_nginx_stage
            #        restart: on-failure
            #        build:
            #            context: ../
            #            dockerfile: ./docker/Dockerfile
            #            target: nginx_stage
            #            args:
            #                USER_ID: "${USER_ID:-You must run export USER_ID}"
            #                GROUP_ID: "${GROUP_ID:-You must run export GROUP_ID}"
            #        volumes:
            #            - ../docker/uwsgi_params:/etc/nginx/uwsgi_params
            #            - ../docker/nginx_stage.conf:/etc/nginx/nginx.conf
            #              #- "${HOST_UPLOADPATH}:${CONTAINER_UPLOADPATH}"
            #              #- "${HOST_ANALYSISFILES}:${CONTAINER_ANALYSISPATH}"

        #
# Cannot use jobrunner since it depends on having a DB,
# which is created by web test framework, which we do not know
# when it is finished
            #    jobrunner:
            #        depends_on:
            #            - db
            #        extends:
            #            file: ../docker/docker-compose-base.yml
            #            service: jobrunner
            #        env_file:
            #            - ../docker/testing.env
            #        volumes:
            #            - ../backend:/kantele
            #        environment:
            #             DB_HOST: db
            #             RABBITHOST: mq
            #             HOST_UPLOADDIR: "${CONTAINER_UPLOADPATH}"
            #             STORAGESHARENAMES: "storage,oldstorage"
            #             DB_NAME: "test_${KANTELE_DB_NAME}"
            #

---
# Playbook for starting services on storage servers

- hosts: storage
  become: yes
  become_user: '{{ storage_user }}'
  tasks:
      - name: Update kantele code
        git:
            repo: "{{ kantele_repo }}"
            dest: "{{ kanteledir }}"
            version: master
  
            #- name: FIXME passwordless SSH key to use for rsync from web server
      - name: Backup download -- create folder for backups
        ansible.builtin.file:
            path: "{{ storage_backup_path }}"
            state: directory

      - name: Backup download -- template out backup script
        ansible.builtin.template:
            src: "download_backup.j2"
            dest: "{{ kanteledir }}/download_backup.sh"

      - name: Backup download -- crontab setup 
        # FIXME how to error report?
        ansible.builtin.cron:
            name: Download kantele DB dump backup
            hour: "3"
            minute: "*/5"
            job: "bash {{ kanteledir }}/download_backup.sh"

      - name: Update virtualenv on storage (SCL, so use shell script)
        shell:
            cmd: "scl enable rh-python36 rh-postgresql12 -- {{ kantelevenv }}/bin/pip install -r {{ kanteledir }}/src/backend/requirements.txt"

      - name: Get celery processes running
        shell: "ps x | grep -v grep | grep -w celery | awk '{print $1}'"
        register: running_celery

      - name: Kill running celery
        command: "kill {{ item }}"
        register: result
        failed_when:
            - result.rc != 0
            - "'no process killed' not in result.stderr"
            - "'No such process' not in result.stderr"
        loop: "{{ running_celery.stdout_lines }}"

      - wait_for:
          path: "/proc/{{ item }}/status"
          state: absent
          timeout: 300
        loop: "{{ running_celery.stdout_lines }}"
        ignore_errors: yes
        register: killed_processes
         
      - name: Kill -9 celery that doesnt die
        shell: "kill -9 {{ item }}"
        loop: "{{ killed_processes.results | select('failed') | map(attribute='item') | list }}"

      - name: Transfer start script
        template:
            src: "{{ item }}.j2"
            dest: "{{ kanteledir }}/{{ item }}.sh"
        loop:
            - "storage_dl"
            - "storage_pdc"
            - "storage_local"

      - name: Start file management (storage, MD5)
        command: "scl enable rh-python36 rh-postgresql12 -- bash {{ kanteledir }}/{{ item }}.sh"
        args:
            chdir: "{{ kanteledir }}/src/backend"
        environment: "{{ storage_env }}"
        loop:
            - "storage_dl"
            - "storage_pdc"
            - "storage_local"

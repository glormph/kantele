--- 
# DB restoring on production from backup

- hosts: kantele
  become: yes
  become_user: '{{ kanteleuser }}'
  tasks:
      - name: Remove running docker containers
        community.docker.docker_compose:
            project_src: '{{ kanteledir }}'
            files:
                - '{{ kanteledir }}/docker-compose-base.yml'
                - '{{ kanteledir }}/src/docker/docker-compose-prod.yml'
            state: absent
            env_file: '{{ kanteledir }}/.compose.prod.env'
        environment:
            - USER_ID: '{{ kanteleuid }}'
            - GROUP_ID: '{{ kantelegid }}'

      - name: Check if old pgdata exists
        ansible.builtin.stat:
            path: '{{ pgdatadir }}'
        register: pgdstat

      - name: Copy old pgdata to backup
        become: yes
        become_user: root
        ansible.builtin.copy:
            src: '{{ pgdatadir }}'
            remote_src: yes
            dest: '{{ homedir }}/pgdata_{{ ansible_date_time.iso8601 }}'
        when: pgdstat.stat.exists

      - name: Remove existing pgdata dir after copying
        become: yes
        become_user: root
        ansible.builtin.file:
            path: '{{ pgdatadir }}'
            state: absent
        when: pgdstat.stat.exists

      - name: Copy sql dump to server (takes long time)
        ansible.builtin.copy:
            src: '{{ sqldump }}'
            dest: '{{ host_pgbackup_path }}'

      - name: DB service up
        community.docker.docker_compose:
            project_src: '{{ kanteledir }}'
            services: db
            files:
                - '{{ kanteledir }}/docker-compose-base.yml'
                - '{{ kanteledir }}/src/docker/docker-compose-prod.yml'
            env_file: '{{ kanteledir }}/.compose.prod.env'
            build: yes
            state: present

      - name: Wait for DB to come up
        ansible.builtin.wait_for:
            timeout: 10

      - name: Create user in postgres
        ansible.builtin.command:
            chdir: '{{ kanteledir }}'
            cmd: docker-compose --env-file .compose.prod.env -f docker-compose-base.yml -f src/docker/docker-compose-prod.yml exec db psql -U postgres -c "CREATE USER {{ kanteledbuser }} WITH PASSWORD '{{ db_pass }}'"

      - name: Create kantele DB in postgres
        ansible.builtin.command:
            chdir: '{{ kanteledir }}'
            cmd: 'docker-compose --env-file .compose.prod.env -f docker-compose-base.yml -f src/docker/docker-compose-prod.yml exec db createdb -U postgres {{ kanteledb }}'

      - name: Restore DB from existing DB
        ansible.builtin.command:
            chdir: '{{ kanteledir }}'
            cmd: 'docker-compose --env-file .compose.prod.env -f docker-compose-base.yml -f src/docker/docker-compose-prod.yml exec db psql -U {{ kanteledbuser }} -d {{ kanteledb }} -f /pgbackups/{{ sqldump | basename }}'

      - name: Remove running docker containers
        community.docker.docker_compose:
            project_src: '{{ kanteledir }}'
            files:
                - '{{ kanteledir }}/docker-compose-base.yml'
                - '{{ kanteledir }}/src/docker/docker-compose-prod.yml'
            state: absent
            env_file: '{{ kanteledir }}/.compose.prod.env'
        environment:
            - USER_ID: '{{ kanteleuid }}'
            - GROUP_ID: '{{ kantelegid }}'

      - name: Build and start production docker containers
        community.docker.docker_compose:
            project_src: '{{ kanteledir }}'
            files:
                - '{{ kanteledir }}/docker-compose-base.yml'
                - '{{ kanteledir }}/src/docker/docker-compose-prod.yml'
            env_file: '{{ kanteledir }}/.compose.prod.env'
            build: yes
            state: present
        environment:
            - USER_ID: '{{ kanteleuid }}'
            - GROUP_ID: '{{ kantelegid }}'

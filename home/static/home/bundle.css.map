{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../../frontend/home/Table.svelte",
    "../../../frontend/home/Tabs.svelte",
    "../../../frontend/home/DetailBox.svelte"
  ],
  "sourcesContent": [
    "<script>\n\nimport {querystring, push} from 'svelte-spa-router';\nimport { onMount, createEventDispatcher } from 'svelte';\nimport { getJSON, postJSON } from '../../datasets/src/funcJSON.js'\n\nimport TableItem from './TableItem.svelte'\nimport { flashtime } from '../../util.js'\n\nexport let items = {};\nexport let fields;\nexport let statecolors;\nexport let fixedbuttons = [];\nexport let selected;\nexport let getdetails;\nexport let inactive = [];\nexport let fetchUrl;\nexport let findUrl;\nexport let notif;\nexport let tab;\n\nexport let treatItems = async function(url, thing, operationmsg, callback, itemids) {\n  if (!itemids) {\n    const itemids = selected;\n  }\n  for (let itemid of itemids) {\n\t  const resp = await postJSON(url, {item_id: itemid});\n    if (!resp.ok) {\n      const msg = `Something went wrong ${operationmsg} ${thing} with id ${itemid}: ${resp.error}`;\n      notif.errors[msg] = 1;\n      setTimeout(function(msg) { notif.errors[msg] = 0 } , flashtime, msg);\n    } else {\n      const msg = `${thing} with id ${itemid} queued for ${operationmsg}`;\n      notif.messages[msg] = 1;\n      setTimeout(function(msg) { notif.messages[msg] = 0 } , flashtime, msg);\n      if (callback) {\n        callback(items[itemid]);\n      }\n      items = items; //update items, callback doesnt actually do that since it assigns to variable\n    }\n  }\n}\n\nconst dispatch = createEventDispatcher();\nlet order = [];\nlet findQueryString = '';\nlet showDetailBox = false;\nlet detailsLoaded = false;\nlet detailBoxContent = '';\nlet searchdeleted = false;\nlet loadingItems = false;\nlet loadingNonce;\n\nfunction toggleSelectAll() {\n  selected.length < order.length ? selected = order : selected = [];\n}\n\nfunction fetchItems(ids) {\n\tconst url = ids.length ? fetchUrl + `?ids=${ids.join(',')}` : fetchUrl;\n  loadItems(url);\n}\n\nfunction findItems(q) {\n  const url = `${findUrl}?q=${q}&deleted=${searchdeleted}`;\n  loadItems(url);\n}\n\nfunction findQuery(event) {\n  if (event.keyCode === 13) {\n    // Push doesnt reload the component\n    const q = findQueryString.split(' ').join(',');\n    push(`#/${tab.toLowerCase()}?q=${q}&deleted=${searchdeleted}`);\n    findItems(q);\n  }\n}\n\nasync function showDetails(itemId) {\n  showDetailBox = itemId; \n  detailsLoaded = false;\n  detailBoxContent = await getdetails(itemId);\n  detailsLoaded = true;\n}\n\nfunction clickSingleDetails(rowid) {\n  dispatch('detailview', {ids: [rowid]});\n}\n\nasync function loadItems(url) {\n  loadingItems = true;\n  const localNonce = loadingNonce = new Object();\n  const result = await getJSON(url);\n  loadingItems = false;\n  if ('error' in result) {\n    const msg = `While fetching ${tab.toLowerCase()}: ${result.error}`;\n    notif.errors[msg] = 1;\n    setTimeout(function(msg) { notif.errors[msg] = 0 } , flashtime, msg);\n  } else if (localNonce !== loadingNonce) {\n    // Override the previous request so only the latest gets rendered on the page\n    return;\n  } else {\n    order = [];\n    items = {};\n    items = result.items;\n    order = result.order;\n  }\n}\n\nonMount(async() => {\n  let qs;\n  try {\n    qs = Object.fromEntries($querystring.split('&').map(x => x.split('=')));\n  } catch {\n    // Default to just show if querystring is garbage\n    fetchItems([]);\n    return;\n  } \n  if ('ids' in qs) {\n    fetchItems(qs.ids.split(','));\n  } else if ('q' in qs) {\n    searchdeleted = ('deleted' in qs && ['true', 1, 'True'].indexOf(qs.deleted) > -1) ? true : false;\n    findQueryString = qs.q.split(',').join(' ');\n    findItems(qs.q);\n  } else {\n    fetchItems([]);\n  }\n})\n</script>\n\n<style>\n.box {\n  position: absolute;\n}\n\ndiv.spinner {\n  position: absolute;\n  left: 50%;\n  padding-top: 20px;\n}\n</style>\n\n<div class=\"content is-small\">\n  <input type=\"checkbox\" bind:checked={searchdeleted}>Search deleted {tab.toLowerCase()}\n  <input class=\"input is-small\" on:keyup={findQuery} bind:value={findQueryString} type=\"text\" placeholder={`Type a query and press enter to search ${tab.toLowerCase()}`}>\n\n<table class=\"table\">\n  <thead>\n    <tr>\n      <th>\n        <input type=\"checkbox\" on:click={toggleSelectAll}>\n      </th>\n      {#each fields as field}\n      <th>\n      {#if field.name.slice(0, 2) === '__'}\n        <span class=\"icon is-small\">\n          <i class={`fa fa-${field.name.slice(2)}`}></i>\n        </span>\n      {:else}\n      {field.name}\n      {/if}\n      </th>\n      {/each}\n    </tr>\n  </thead>\n\n{#if loadingItems}\n<div class=\"has-text-centered spinner\">\n  <i class=\"fa fa-spinner fa-pulse fa-2x\"></i>\n</div>\n{/if}\n\n  <tbody>\n    {#each order.map(x => [x, items[x]]) as [rowid, row]}\n    <tr>\n      <td>\n        <input type=\"checkbox\" bind:group={selected} value={row.id}>\n        <a on:click={e => clickSingleDetails(rowid)} on:mouseenter={e => showDetails(rowid)} on:mouseleave={e => showDetailBox = false}>\n          <span class=\"has-text-info icon is-small\"> <i class=\"fa fa-eye\"></i> </span>\n          {#if showDetailBox === rowid}\n          <div class=\"box\" >\n            {#if !detailsLoaded}\n            <i class=\"fa fa-spinner fa-pulse fa-2x\"></i>\n            {:else}\n            {@html detailBoxContent}\n            {/if}\n          </div>\n          {/if}\n        </a>\n        {#each fixedbuttons as button}\n        <a title={button.alt} on:click={e => button.action(row.id)}>\n        <span class=\"icon has-text-info is-small\"><i class={`fa fa-${button.name.slice(2)}`}></i></span>\n        </a>\n        {/each}\n      </td>\n        {#each fields as field}\n        <td>\n          {#if field.links}\n          {#if row[field.links].length || row[field.links] > 0}\n          <a href={`${field.linkroute}?ids=${row[field.links]}`}>\n            {#if field.multi}\n            {#each row[field.id] as item}\n            <TableItem value={item} rowid={rowid} inactive={inactive.some(x=>row[x])} help={field.help} icon={field.icon} field={field} color={statecolors[field.id]} on:rowAction />\n            {/each}\n            {:else} \n            <TableItem value={row[field.id]} rowid={rowid} inactive={inactive.some(x=>row[x])} help={field.help} icon={field.icon} field={field} color={statecolors[field.id]} on:rowAction />\n            {/if}\n          </a>\n          {/if}\n\n          {:else}\n          {#if field.multi}\n          {#each row[field.id] as item}\n          <TableItem value={item} rowid={rowid} inactive={inactive.some(x=>row[x])} help={field.help} icon={field.icon} field={field} color={statecolors[field.id]} on:rowAction />\n          {/each}\n          {:else} \n          <TableItem value={row[field.id]} rowid={rowid} inactive={inactive.some(x=>row[x])} help={field.help} icon={field.icon} field={field} color={statecolors[field.id]} on:rowAction />\n          {/if}\n          {/if}\n\n        </td>\n        {/each}\n    </tr>\n    {/each}\n  </tbody>\n</table>\n</div>\n",
    "<script>\n\nexport let tabshow; \nexport let notif;\n\nlet tabs = ['Datasets', 'Projects', 'Analyses', 'Files', 'Jobs'];\n\n</script>\n\n<style>\n.errormsg {\n  position: -webkit-sticky;\n  position: sticky;\n  top: 20px;\n}\n</style>\n\n{#if Object.values(notif.errors).some(x => x === 1)}\n<div class=\"notification is-danger is-light errormsg\"> \n    {#each Object.entries(notif.errors).filter(x => x[1] == 1).map(x=>x[0]) as error}\n    <div>{error}</div>\n    {/each}\n</div>\n{/if}\n\n{#if Object.values(notif.messages).some(x => x === 1)}\n<div class=\"notification is-success is-light errormsg\"> \n    {#each Object.entries(notif.messages).filter(x => x[1] == 1).map(x=>x[0]) as message}\n    <div>{message}</div>\n    {/each}\n</div>\n{/if}\n\n<div class=\"content\">\n  <div class=\"tabs is-toggle is-centered is-small\">\n    <ul>\n      {#each tabs as tab}\n      <li class={tabshow === tab ? 'is-active' : ''}>\n        <a href={`#/${tab.toLowerCase()}`}><span>{tab}</span></a>\n      </li>\n      {/each}\n    </ul>\n  </div>\n</div>\n",
    "<script>\n\nexport let notif;\nexport let closeWindow;\n\nfunction handleKeypress(event) {\n  if (event.keyCode === 27) { closeWindow(); }\n}\n\n</script>\n\n<style>\n.detailbox {\n  position: absolute;\n  top: 40px;\n  width: 100%;\n  height: 100%;\n  z-index: 40; \n  pointer-events: none;\n}\n\n.modalbox {\n  position: -webkit-sticky;\n  position: sticky;\n  padding: 100px;\n  top: 0px;\n  pointer-events: all;\n}\n\n.closebutton {\n  position: absolute;\n  top: 20px;\n  right: 20px;\n}\n\n.notification {\n  position: sticky;\n  top: 20px;\n  left: 20px;\n  z-index: 50;\n}\n</style>\n\n<svelte:window on:keyup={handleKeypress} />\n\n<div class=\"detailbox\">\n  <div class=\"box modalbox\">\n\n    {#if Object.values(notif.errors).some(x => x === 1)}\n    <div class=\"notification is-danger is-light errormsg\"> \n        {#each Object.entries(notif.errors).filter(x => x[1] == 1).map(x=>x[0]) as error}\n        <div>{error}</div>\n        {/each}\n    </div>\n    {/if}\n    {#if Object.values(notif.messages).some(x => x === 1)}\n    <div class=\"notification is-success is-light errormsg\"> \n        {#each Object.entries(notif.messages).filter(x => x[1] == 1).map(x=>x[0]) as message}\n        <div>{message}</div>\n        {/each}\n    </div>\n    {/if}\n  \n    <slot></slot>\n    <button on:click={closeWindow()} class=\"button closebutton\" aria-label=\"close\"><span class=\"icon\"><i class=\"fa fa-times\"></i></span></button>\n  </div>\n</div>\n"
  ],
  "names": [],
  "mappings": "AAiIA,IAAI,eAAC,CAAC,AACJ,QAAQ,CAAE,QAAQ,AACpB,CAAC,AAED,GAAG,QAAQ,eAAC,CAAC,AACX,QAAQ,CAAE,QAAQ,CAClB,IAAI,CAAE,GAAG,CACT,WAAW,CAAE,IAAI,AACnB,CAAC;AC/HD,SAAS,cAAC,CAAC,AACT,QAAQ,CAAE,cAAc,CACxB,QAAQ,CAAE,MAAM,CAChB,GAAG,CAAE,IAAI,AACX,CAAC;ACFD,UAAU,eAAC,CAAC,AACV,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,IAAI,CACT,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,EAAE,CACX,cAAc,CAAE,IAAI,AACtB,CAAC,AAED,SAAS,eAAC,CAAC,AACT,QAAQ,CAAE,cAAc,CACxB,QAAQ,CAAE,MAAM,CAChB,OAAO,CAAE,KAAK,CACd,GAAG,CAAE,GAAG,CACR,cAAc,CAAE,GAAG,AACrB,CAAC,AAED,YAAY,eAAC,CAAC,AACZ,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,IAAI,CACT,KAAK,CAAE,IAAI,AACb,CAAC,AAED,aAAa,eAAC,CAAC,AACb,QAAQ,CAAE,MAAM,CAChB,GAAG,CAAE,IAAI,CACT,IAAI,CAAE,IAAI,CACV,OAAO,CAAE,EAAE,AACb,CAAC"
}